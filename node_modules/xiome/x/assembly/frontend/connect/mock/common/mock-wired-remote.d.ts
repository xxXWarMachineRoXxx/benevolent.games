import { Await } from "../../../../../types/await.js";
import { backendForNode } from "../../../../backend/backend-for-node.js";
import { FlexStorage } from "../../../../../toolbox/flex-storage/types/flex-storage.js";
export declare function mockWiredRemote({ appId, appOrigin, storage, backend, }: {
    appId: string;
    appOrigin: string;
    storage: FlexStorage;
    backend: Await<ReturnType<typeof backendForNode>>;
}): Promise<{
    remote: import("renraku").ApiRemote<{
        auth: {
            apps: {
                appService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").PlatformUserMeta, import("../../../../../features/auth/types/auth-metas.js").PlatformUserAuth, {
                    listApps({ ownerUserId: ownerUserIdString }: {
                        ownerUserId: string;
                    }): Promise<import("../../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay[]>;
                    registerApp({ appDraft, ownerUserId: ownerUserIdString }: {
                        appDraft: import("../../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                        ownerUserId: string;
                    }): Promise<import("../../../../../features/auth/aspects/apps/types/app-display.js").AppDisplay>;
                }>;
                appEditService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").AppOwnerMeta, import("../../../../../features/auth/types/auth-metas.js").AppOwnerAuth, {
                    updateApp({ appId: appIdString, appDraft }: {
                        appId: string;
                        appDraft: import("../../../../../features/auth/aspects/apps/types/app-draft.js").AppDraft;
                    }): Promise<void>;
                    deleteApp({ appId: appIdString }: {
                        appId: string;
                    }): Promise<void>;
                    listAdmins({ appId: appIdString }: {
                        appId: string;
                    }): Promise<import("../../../../../features/auth/aspects/apps/types/admin-email-display.js").AdminEmailDisplay[]>;
                    assignPlatformUserAsAdmin({ appId: appIdString, platformUserId: platformUserIdString }: {
                        appId: string;
                        platformUserId: string;
                    }): Promise<void>;
                    assignAdmin({ appId: appIdString, email }: {
                        appId: string;
                        email: string;
                    }): Promise<void>;
                    revokeAdmin({ appId: appIdString, userId: userIdString }: {
                        appId: string;
                        userId: string;
                    }): Promise<void>;
                }>;
            };
            users: {
                greenService: import("renraku").Service<undefined, import("../../../../../features/auth/types/auth-metas.js").GreenAuth, {
                    authorize({ scope, refreshToken, appId: appIdString, }: {
                        scope: import("../../../../../features/auth/types/auth-tokens.js").CoreScope;
                        appId: string;
                        refreshToken?: string;
                    }): Promise<string>;
                }>;
                loginService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../../features/auth/types/auth-metas.js").LoginAuth, {
                    sendLoginLink(inputs: {
                        email: string;
                    }): Promise<void>;
                    authenticateViaLoginToken({ loginToken }: {
                        loginToken: string;
                    }): Promise<import("../../../../../toolbox/concurrent.js").AwaitProps<{
                        accessToken: Promise<string>;
                        refreshToken: Promise<string>;
                    }>>;
                }>;
                userService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../../features/auth/types/auth-metas.js").LoginAuth, {
                    getUser({ userId }: {
                        userId: string;
                    }): Promise<{
                        userId: string;
                        profile: import("../../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    }>;
                }>;
                personalService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../../features/auth/types/auth-metas.js").UserAuth, {
                    setProfile({ userId: userIdString, profileDraft }: {
                        userId: string;
                        profileDraft: import("../../../../../features/auth/aspects/users/routines/personal/types/profile-draft.js").ProfileDraft;
                    }): Promise<void>;
                }>;
            };
            permissions: {
                permissionsService: import("renraku").Service<import("../../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                    engine: {
                        getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                            userIds: string[];
                            onlyGetPublicRoles: boolean;
                        }) => Promise<{
                            userId: string;
                            userHasRoles: {
                                userId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                                roleId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                                timeframeStart: number;
                                timeframeEnd: number;
                                public: boolean;
                                hard: boolean;
                                time: number;
                            }[];
                        }[]>;
                        getAnonymousPrivileges: () => Promise<string[]>;
                        getPrivilegesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            privileges: string[];
                        }[]>;
                        getPublicRolesForUsers: (userIds: string[]) => Promise<{
                            userId: string;
                            publicUserRoles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        }[]>;
                        getPermissionsDisplay: () => Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                        getPrivileges: (privilegeIds: string[]) => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getAllPrivileges: () => Promise<{
                            hard: boolean;
                            label: string;
                            time: number;
                            privilegeId: string;
                        }[]>;
                        getUserPrivileges: (userId: string) => Promise<string[]>;
                    };
                    access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                    authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
                    checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                        universal: string;
                        banned: string;
                        "moderate all chats": string;
                        "control stripe account": string;
                        "manage store": string;
                        "give away freebies": string;
                        "view all videos": string;
                        "moderate videos": string;
                        "edit any profile": string;
                        "customize permissions": string;
                        "answer questions": string;
                        "moderate questions": string;
                        "view stats": string;
                        "administrate user roles": string;
                        "view all chats": string;
                        "participate in all chats": string;
                        "read questions": string;
                        "post questions": string;
                        "like questions": string;
                        "report questions": string;
                    }>;
                }, {
                    fetchPermissions(): Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    createRole({ label }: {
                        label: string;
                    }): Promise<void>;
                    deleteRole({ roleId: roleIdString }: {
                        roleId: string;
                    }): Promise<void>;
                    assignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                        roleId: string;
                        privilegeId: string;
                    }): Promise<void>;
                    unassignPrivilege({ roleId: roleIdString, privilegeId: privilegeIdString }: {
                        roleId: string;
                        privilegeId: string;
                    }): Promise<void>;
                    createPrivilege({ label }: {
                        label: string;
                    }): Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/privilege-display.js").PrivilegeDisplay>;
                    deletePrivilege({ privilegeId: privilegeIdString }: {
                        privilegeId: string;
                    }): Promise<void>;
                }>;
            };
        };
        administrative: {
            roleAssignmentService: import("renraku").Service<import("../../../../../features/auth/aspects/permissions/types/permissions-auth-and-metas.js").PermissionsMeta, {
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            roleId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
                checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                fetchPermissions(): Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                searchUsers(options: {
                    term: string;
                }): Promise<{
                    user: {
                        userId: string;
                        profile: import("../../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    };
                    roleIds: string[];
                }[]>;
                assignRoleToUser(options: {
                    roleId: string;
                    userId: string;
                    isPublic: boolean;
                    timeframeEnd: number;
                    timeframeStart: number;
                }): Promise<void>;
                revokeRoleFromUser(options: {
                    roleId: string;
                    userId: string;
                }): Promise<void>;
            }>;
        };
        questions: {
            questionsReadingService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").AnonMeta, import("../../../../../features/auth/types/auth-metas.js").LoginAuth & {
                questionsTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/questions/api/tables/types/questions-tables.js").QuestionsTables>;
            }, {
                fetchQuestions({ board }: {
                    board: string;
                }): Promise<{
                    users: {
                        userId: string;
                        profile: import("../../../../../features/auth/aspects/users/types/profile.js").Profile;
                        roles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                        stats: import("../../../../../features/auth/aspects/users/types/user-stats.js").UserStats;
                    }[];
                    questions: {
                        answers: import("../../../../../features/questions/api/types/questions-and-answers.js").Answer[];
                        questionId: string;
                        authorUserId: string;
                        board: string;
                        content: string;
                        archive: boolean;
                        timePosted: number;
                        liked: boolean;
                        likes: number;
                        reports: number;
                        reported: boolean;
                    }[];
                }>;
            }>;
            questionsPostingService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../../features/auth/types/auth-metas.js").UserAuth & {
                questionsTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/questions/api/tables/types/questions-tables.js").QuestionsTables>;
            }, {
                postQuestion(inputs: {
                    questionDraft: import("../../../../../features/questions/api/types/question-draft.js").QuestionDraft;
                }): Promise<import("../../../../../features/questions/api/types/questions-and-answers.js").Question>;
                archiveQuestion(inputs: {
                    archive: boolean;
                    questionId: string;
                }): Promise<void>;
                likeQuestion(inputs: {
                    like: boolean;
                    questionId: string;
                }): Promise<void>;
                reportQuestion(inputs: {
                    report: boolean;
                    questionId: string;
                }): Promise<void>;
            }>;
            questionsAnsweringService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../../features/auth/types/auth-metas.js").UserAuth & {
                questionsTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/questions/api/tables/types/questions-tables.js").QuestionsTables>;
            }, {
                postAnswer(inputs: {
                    questionId: string;
                    answerDraft: import("../../../../../features/questions/api/types/answer-draft.js").AnswerDraft;
                }): Promise<import("../../../../../features/questions/api/types/questions-and-answers.js").Answer>;
                archiveAnswer(inputs: {
                    archive: boolean;
                    answerId: string;
                }): Promise<void>;
                likeAnswer(inputs: {
                    like: boolean;
                    answerId: string;
                }): Promise<void>;
                reportAnswer(inputs: {
                    report: boolean;
                    answerId: string;
                }): Promise<void>;
            }>;
            questionsModerationService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").UserMeta, import("../../../../../features/auth/types/auth-metas.js").UserAuth & {
                questionsTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/questions/api/tables/types/questions-tables.js").QuestionsTables>;
            }, {
                archiveBoard({ board }: {
                    board: string;
                }): Promise<void>;
                fetchReportedQuestions(): Promise<void>;
            }>;
        };
        example: {
            exampleService: import("renraku").Service<import("../../../../../features/auth/types/auth-metas.js").UserMeta, {
                exampleTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/example/api/types/example-tables.js").ExampleTables>;
                access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
                checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                exampleFunction({ something }: {
                    something: string;
                }): Promise<void>;
            }>;
        };
        videos: {
            dacastService: import("renraku").Service<import("../../../../../features/videos/types/video-auth.js").VideoMeta, {
                checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    "view all videos": string;
                    "moderate videos": string;
                }>;
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            roleId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                videoTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/videos/types/video-tables.js").VideoTables>;
                access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
            }, {
                getLink(): Promise<import("../../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                setLink(inputs: {
                    apiKey: string;
                }): Promise<import("../../../../../features/videos/types/dacast-link.js").DacastLinkDisplay>;
                clearLink(): Promise<void>;
            }>;
            contentService: import("renraku").Service<import("../../../../../features/videos/types/video-auth.js").VideoMeta, {
                engine: {
                    getUsersHaveRoles: ({ userIds, onlyGetPublicRoles }: {
                        userIds: string[];
                        onlyGetPublicRoles: boolean;
                    }) => Promise<{
                        userId: string;
                        userHasRoles: {
                            userId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            roleId: import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                            timeframeStart: number;
                            timeframeEnd: number;
                            public: boolean;
                            hard: boolean;
                            time: number;
                        }[];
                    }[]>;
                    getAnonymousPrivileges: () => Promise<string[]>;
                    getPrivilegesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        privileges: string[];
                    }[]>;
                    getPublicRolesForUsers: (userIds: string[]) => Promise<{
                        userId: string;
                        publicUserRoles: import("../../../../../features/auth/aspects/users/types/public-user-role.js").PublicUserRole[];
                    }[]>;
                    getPermissionsDisplay: () => Promise<import("../../../../../features/auth/aspects/users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
                    getPrivileges: (privilegeIds: string[]) => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getAllPrivileges: () => Promise<{
                        hard: boolean;
                        label: string;
                        time: number;
                        privilegeId: string;
                    }[]>;
                    getUserPrivileges: (userId: string) => Promise<string[]>;
                };
                checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    "view all videos": string;
                    "moderate videos": string;
                }>;
                videoTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/videos/types/video-tables.js").VideoTables>;
                access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
            }, {
                fetchModerationData(): Promise<import("../../../../../features/videos/types/video-concepts.js").VideoModerationData>;
                writeView({ label, privileges, reference, }: {
                    label: string;
                    privileges: string[];
                    reference: import("../../../../../features/videos/types/video-concepts.js").VideoHosting.DacastReference;
                }): Promise<void>;
                deleteView({ label }: {
                    label: string;
                }): Promise<void>;
                getShows({ labels }: {
                    labels: string[];
                }): Promise<import("../../../../../features/videos/types/video-concepts.js").VideoShow[]>;
            }>;
        };
        notes: {
            notesService: import("renraku").Service<import("../../../../../features/notes/api/types/notes-auth.js").NotesMeta, {
                notesTables: import("../../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
                    "namespace-appId": import("../../../../../toolbox/damnedb/damn-id.js").DamnId;
                }, import("../../../../../features/notes/api/tables/notes-tables.js").NotesTables>;
                access: import("../../../../../features/auth/types/auth-tokens.js").AccessPayload;
                authTables: import("../../../../../features/auth/types/auth-tables.js").AuthTables;
                checker: import("../../../../../features/auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
                    universal: string;
                    banned: string;
                    "moderate all chats": string;
                    "control stripe account": string;
                    "manage store": string;
                    "give away freebies": string;
                    "view all videos": string;
                    "moderate videos": string;
                    "edit any profile": string;
                    "customize permissions": string;
                    "answer questions": string;
                    "moderate questions": string;
                    "view stats": string;
                    "administrate user roles": string;
                    "view all chats": string;
                    "participate in all chats": string;
                    "read questions": string;
                    "post questions": string;
                    "like questions": string;
                    "report questions": string;
                }>;
            }, {
                getNotesStats(): Promise<import("../../../../../features/notes/types/notes-concepts.js").NotesStats>;
                getNewNotes(pagination: import("../../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                getOldNotes(pagination: import("../../../../../features/notes/types/notes-concepts.js").Pagination): Promise<import("../../../../../features/notes/types/notes-concepts.js").Notes.Any[]>;
                markAllNotesOld(): Promise<void>;
                markNotesNewOrOld(input: {
                    old: boolean;
                    noteIds: string[];
                }): Promise<void>;
            }>;
        };
    }>;
    authMediator: {
        subscribeToAccessChange: import("../../../../../toolbox/pubsub.js").Subscribe<import("../../../../../features/auth/mediator/types/access-event-listener.js").AccessEventListener>;
        subscribeToTokenChange: import("../../../../../toolbox/pubsub.js").Subscribe<() => void>;
        initialize(): Promise<import("../../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        getValidAccess(): Promise<import("../../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        getValidAccessToken(): Promise<string>;
        login(tokens: import("../../../../../features/auth/types/auth-tokens.js").AuthTokens): Promise<import("../../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        logout(): Promise<import("../../../../../features/auth/types/auth-tokens.js").AccessPayload>;
        reauthorize(): Promise<import("../../../../../features/auth/types/auth-tokens.js").AccessPayload>;
    };
    setMockLatency: (value: import("renraku").MockLatency) => void;
}>;
