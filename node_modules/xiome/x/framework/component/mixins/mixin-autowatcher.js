var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
import { autowatcher } from "../../../toolbox/autowatcher/autowatcher.js";
export function mixinAutowatcher(Base) {
    var _unsubscribers, _a;
    return _a = class extends Base {
            constructor() {
                super(...arguments);
                this.auto = autowatcher();
                _unsubscribers.set(this, []);
                this.subscribeAutotrack = (track) => {
                    __classPrivateFieldGet(this, _unsubscribers, "f").push(track({
                        watcher: () => this.render(),
                        effect: () => this.requestUpdate(),
                    }));
                };
            }
            render() { }
            firstUpdated(changes) {
                this.subscribeAutotrack(this.auto.track);
            }
            dispose() {
                for (const unsubscribe of __classPrivateFieldGet(this, _unsubscribers, "f"))
                    unsubscribe();
                __classPrivateFieldSet(this, _unsubscribers, [], "f");
                this.auto.dispose();
            }
        },
        _unsubscribers = new WeakMap(),
        _a;
}
//# sourceMappingURL=mixin-autowatcher.js.map