import * as renraku from "renraku";
import { DamnId } from "../../../../toolbox/damnedb/damn-id.js";
import { UserAuth, UserMeta } from "../../../auth/types/auth-metas.js";
import { SecretConfig } from "../../../../assembly/backend/types/secret-config.js";
import { UnconstrainedTables } from "../../../../framework/api/types/table-namespacing-for-apps.js";
import { NotesMeta } from "../types/notes-auth.js";
import { NotesTables } from "../tables/notes-tables.js";
import { Notes, NotesStats, Pagination } from "../../types/notes-concepts.js";
export declare const makeNotesService: ({ config, basePolicy, notesTables: rawNotesTables, }: {
    config: SecretConfig;
    notesTables: UnconstrainedTables<NotesTables>;
    basePolicy: renraku.Policy<UserMeta, UserAuth>;
}) => renraku.Service<NotesMeta, {
    notesTables: import("../../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
        "namespace-appId": DamnId;
    }, NotesTables>;
    access: import("../../../auth/types/auth-tokens.js").AccessPayload;
    authTables: import("../../../auth/types/auth-tables.js").AuthTables;
    checker: import("../../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
        universal: string;
        banned: string;
        "moderate all chats": string;
        "control stripe account": string;
        "manage store": string;
        "give away freebies": string;
        "view all videos": string;
        "moderate videos": string;
        "edit any profile": string;
        "customize permissions": string;
        "answer questions": string;
        "moderate questions": string;
        "view stats": string;
        "administrate user roles": string;
        "view all chats": string;
        "participate in all chats": string;
        "read questions": string;
        "post questions": string;
        "like questions": string;
        "report questions": string;
    }>;
}, {
    getNotesStats(): Promise<NotesStats>;
    getNewNotes(pagination: Pagination): Promise<Notes.Any[]>;
    getOldNotes(pagination: Pagination): Promise<Notes.Any[]>;
    markAllNotesOld(): Promise<void>;
    markNotesNewOrOld(input: {
        old: boolean;
        noteIds: string[];
    }): Promise<void>;
}>;
