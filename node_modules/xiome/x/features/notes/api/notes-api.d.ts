import * as renraku from "renraku";
import { NotesTables } from "./tables/notes-tables.js";
import { SecretConfig } from "../../../assembly/backend/types/secret-config.js";
import { prepareAuthPolicies } from "../../auth/policies/prepare-auth-policies.js";
import { UnconstrainedTables } from "../../../framework/api/types/table-namespacing-for-apps.js";
export declare function notesApi({ config, notesTables, authPolicies }: {
    config: SecretConfig;
    notesTables: UnconstrainedTables<NotesTables>;
    authPolicies: ReturnType<typeof prepareAuthPolicies>;
}): {
    notesService: renraku.Service<import("./types/notes-auth.js").NotesMeta, {
        notesTables: import("../../../toolbox/dbby/dbby-types.js").DbbyConstrainTables<{
            "namespace-appId": import("../../../toolbox/damnedb/damn-id.js").DamnId;
        }, NotesTables>;
        access: import("../../auth/types/auth-tokens.js").AccessPayload;
        authTables: import("../../auth/types/auth-tables.js").AuthTables;
        checker: import("../../auth/aspects/permissions/types/privilege-checker.js").PrivilegeChecker<{
            universal: string;
            banned: string;
            "moderate all chats": string;
            "control stripe account": string;
            "manage store": string;
            "give away freebies": string;
            "view all videos": string;
            "moderate videos": string;
            "edit any profile": string;
            "customize permissions": string;
            "answer questions": string;
            "moderate questions": string;
            "view stats": string;
            "administrate user roles": string;
            "view all chats": string;
            "participate in all chats": string;
            "read questions": string;
            "post questions": string;
            "like questions": string;
            "report questions": string;
        }>;
    }, {
        getNotesStats(): Promise<import("../types/notes-concepts.js").NotesStats>;
        getNewNotes(pagination: import("../types/notes-concepts.js").Pagination): Promise<import("../types/notes-concepts.js").Notes.Any[]>;
        getOldNotes(pagination: import("../types/notes-concepts.js").Pagination): Promise<import("../types/notes-concepts.js").Notes.Any[]>;
        markAllNotesOld(): Promise<void>;
        markNotesNewOrOld(input: {
            old: boolean;
            noteIds: string[];
        }): Promise<void>;
    }>;
};
