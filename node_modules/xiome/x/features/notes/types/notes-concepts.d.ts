import { DamnId } from "../../../toolbox/damnedb/damn-id.js";
import { DbbyRow } from "../../../toolbox/dbby/dbby-types.js";
export declare namespace Database {
    type NoteBase = {
        type: NoteType;
        noteId: DamnId;
        time: number;
        to: null | DamnId;
        from: null | DamnId;
        title: string;
        text: string;
        old: boolean;
    };
    namespace NoteDetails {
        type Message = {};
        type Question = {
            questionId: DamnId;
        };
        type Any = Message | Question;
    }
}
export declare type NoteBase = UndatabaseIds<Database.NoteBase>;
export declare type NoteType = "message" | "question";
export interface Note<xDetails extends Database.NoteDetails.Any = Database.NoteDetails.Any> extends NoteBase {
    details: UndatabaseIds<xDetails>;
}
export declare namespace Notes {
    interface Message extends Note<Database.NoteDetails.Message> {
        type: "message";
    }
    interface Question extends Note<Database.NoteDetails.Question> {
        type: "question";
    }
    type Any = Message | Question;
}
export declare type DraftForNote<N extends Note> = Omit<N, "noteId" | "old" | "time">;
export declare type UndatabaseIds<R extends DbbyRow> = {
    [P in keyof R]: R[P] extends DamnId ? string : R[P];
};
export interface Pagination {
    offset: number;
    limit: number;
}
export interface NotesStats {
    newCount: number;
    oldCount: number;
}
export interface Paging {
    pageSize: number;
    pageNumber: number;
}
