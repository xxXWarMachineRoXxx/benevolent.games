import { Op } from "../../../../framework/ops.js";
import { AccessPayload } from "../../../auth/types/auth-tokens.js";
import { VideoModelsOptions } from "../types/video-models-options.js";
import { VideoHosting, VideoShow, VideoView } from "../../types/video-concepts.js";
import { PrivilegeDisplay } from "../../../auth/aspects/users/routines/permissions/types/privilege-display.js";
export declare function makeContentModel({ contentService, }: VideoModelsOptions): {
    state: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        catalogOp: Op<VideoHosting.DacastContent[]>;
        viewsOp: Op<VideoView[]>;
        privilegesOp: Op<PrivilegeDisplay[]>;
        showsOp: Op<VideoShow[]>;
    }>;
    subscribe: (listener: (context: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        catalogOp: Op<VideoHosting.DacastContent[]>;
        viewsOp: Op<VideoView[]>;
        privilegesOp: Op<PrivilegeDisplay[]>;
        showsOp: Op<VideoShow[]>;
    }>) => void) => () => void;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
    onVideoHostingUpdate(): Promise<void>;
    initializeForModerationData(): Promise<void>;
    initializeForVideo(label: string): Promise<void>;
    readonly allowance: {
        canModerateVideos: boolean;
        canViewAllVideos: boolean;
    };
    readonly catalog: VideoHosting.DacastContent[];
    readonly views: VideoView[];
    readonly privileges: PrivilegeDisplay[];
    readonly shows: VideoShow[];
    getView(label: string): VideoView;
    getPrivilege(id: string): PrivilegeDisplay;
    getShow(label: string): VideoShow;
    setView(options: {
        label: string;
        privileges: string[];
        reference: VideoHosting.AnyReference;
    }): Promise<void>;
    deleteView(label: string): Promise<void>;
};
