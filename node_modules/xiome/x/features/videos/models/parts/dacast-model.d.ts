import { Op } from "../../../../framework/ops.js";
import { DacastLinkDisplay } from "../../types/dacast-link.js";
import { AccessPayload } from "../../../auth/types/auth-tokens.js";
import { VideoModelsOptions } from "../types/video-models-options.js";
export declare function makeDacastModel({ dacastService }: VideoModelsOptions): {
    state: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        linkedAccountOp: Op<DacastLinkDisplay>;
    }>;
    subscribe: (listener: (context: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        linkedAccountOp: Op<DacastLinkDisplay>;
    }>) => void) => () => void;
    onLinkChange: (listener: (context: DacastLinkDisplay) => void) => () => void;
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
    initialize(): Promise<void>;
    readonly linkedAccount: DacastLinkDisplay;
    linkAccount({ apiKey }: {
        apiKey: string;
    }): Promise<DacastLinkDisplay>;
    unlinkAccount(): Promise<void>;
};
