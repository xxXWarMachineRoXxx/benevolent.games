import { pub } from "../../../toolbox/pub.js";
import { onesie } from "../../../toolbox/onesie.js";
import { ops } from "../../../framework/ops.js";
import { makeChatState } from "./state/chat-state.js";
import { chatAllowance } from "../common/chat-allowance.js";
import { setupRoomManagement } from "./room/room-management.js";
import { makeChatClientside } from "../api/services/chat-clientside.js";
export function makeChatModel({ chatConnect, getChatMeta }) {
    const changeEvent = pub();
    const state = makeChatState();
    const clientsideApi = makeChatClientside({
        state,
        onChange: changeEvent.publish,
    });
    const reconnect = onesie(async function () {
        const connection = ops.value(state.readable.connectionOp)
            ?? await ops.operation({
                setOp: op => state.writable.connectionOp = op,
                promise: chatConnect({
                    clientsideApi,
                    handleDisconnect: () => state.writable.connectionOp = ops.none(),
                }),
            });
        const meta = await getChatMeta();
        await connection.serverside.chatServer.updateUserMeta(meta);
        return connection;
    });
    async function disconnect() {
        const connection = ops.value(state.readable.connectionOp);
        if (connection) {
            state.writable.connectionOp = ops.none();
            await connection.disconnect();
        }
    }
    const roomManagement = setupRoomManagement({
        state,
        reconnect,
        disconnect,
    });
    return {
        state: state.readable,
        subscribe: state.subscribe,
        subscribeToChange: changeEvent.subscribe,
        get allowance() {
            const access = ops.value(state.readable.accessOp);
            const privileges = access?.permit.privileges ?? [];
            return chatAllowance(privileges);
        },
        async updateAccessOp(op) {
            state.writable.accessOp = op;
            const access = ops.value(op);
            await roomManagement.updateAuthSituation(!!access);
            const connection = ops.value(state.readable.connectionOp);
            if (connection) {
                const meta = await getChatMeta();
                await connection.serverside.chatServer.updateUserMeta(meta);
            }
        },
        session: roomManagement.getRoomSession,
        disconnect,
        reconnect,
    };
}
//# sourceMappingURL=chat-model.js.map