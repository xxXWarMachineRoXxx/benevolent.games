import { Op } from "../../../../framework/ops.js";
import { AccessPayload } from "../../../auth/types/auth-tokens.js";
import { ChatConnection, ChatPost, ChatStatus } from "../../common/types/chat-concepts.js";
export declare function makeChatState(): {
    readable: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectionOp: Op<ChatConnection>;
        cache: {
            mutedUserIds: string[];
            rooms: {
                [key: string]: {
                    status: ChatStatus;
                    posts: ChatPost[];
                };
            };
        };
    }>;
    writable: {
        accessOp: Op<AccessPayload>;
        connectionOp: Op<ChatConnection>;
        cache: {
            mutedUserIds: string[];
            rooms: {
                [key: string]: {
                    status: ChatStatus;
                    posts: ChatPost[];
                };
            };
        };
    };
    subscribe: (listener: (context: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectionOp: Op<ChatConnection>;
        cache: {
            mutedUserIds: string[];
            rooms: {
                [key: string]: {
                    status: ChatStatus;
                    posts: ChatPost[];
                };
            };
        };
    }>) => void) => () => void;
    track<X>(observer: import("../../../../toolbox/snapstate/parts/types.js").Observer<{
        accessOp: Op<AccessPayload>;
        connectionOp: Op<ChatConnection>;
        cache: {
            mutedUserIds: string[];
            rooms: {
                [key: string]: {
                    status: ChatStatus;
                    posts: ChatPost[];
                };
            };
        };
    }, X>, reaction?: import("../../../../toolbox/snapstate/parts/types.js").Reaction<X>): () => void;
    wait(): Promise<void>;
};
