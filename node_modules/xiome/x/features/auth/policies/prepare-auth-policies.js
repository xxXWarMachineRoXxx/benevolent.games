import * as renraku from "renraku";
import { DamnId } from "../../../toolbox/damnedb/damn-id.js";
import { prepareStatsHub } from "../aspects/permissions/tools/prepare-stats-hub.js";
import { isUserOwnerOfApp } from "../aspects/apps/utils/is-user-the-owner-of-app.js";
import { makePrivilegeChecker } from "../aspects/permissions/tools/make-privilege-checker.js";
import { appPermissions, platformPermissions } from "../../../assembly/backend/permissions/standard-permissions.js";
export function prepareAuthPolicies({ config, appTables, authTables, verifyToken, }) {
    const getStatsHub = prepareStatsHub({ appTables, authTables });
    const greenPolicy = async (meta) => ({
        appTables,
        authTables,
    });
    const anonPolicy = async ({ accessToken }, headers) => {
        const access = await verifyToken(accessToken);
        if (access.origins.some(origin => origin === headers.origin))
            return {
                access,
                appTables,
                authTables: authTables.namespaceForApp(DamnId.fromString(access.appId)),
                checker: makePrivilegeChecker(access.permit, appPermissions.privileges),
            };
        else
            throw new renraku.ApiError(403, "request origin not allowed");
    };
    const userPolicy = async (meta, headers) => {
        const auth = await anonPolicy(meta, headers);
        if (auth.access.user)
            return auth;
        else
            throw new renraku.ApiError(403, "not logged in");
    };
    const platformUserPolicy = async (meta, headers) => {
        const auth = await userPolicy(meta, headers);
        if (auth.access.appId === config.platform.appDetails.appId) {
            return {
                ...auth,
                appTables,
                authTables,
                checker: makePrivilegeChecker(auth.access.permit, platformPermissions.privileges),
                statsHub: await getStatsHub(DamnId.fromString(auth.access.user.userId)),
            };
        }
        else
            throw new renraku.ApiError(403, "not platform app");
    };
    const appOwnerPolicy = async (meta, headers) => {
        const auth = await platformUserPolicy(meta, headers);
        async function authorizeAppOwner(appId) {
            const allowedToEditAnyApp = auth.checker.hasPrivilege("edit any app");
            const isOwnerOfApp = isUserOwnerOfApp({ appId, appTables, access: auth.access });
            const allowed = isOwnerOfApp || allowedToEditAnyApp;
            if (allowed)
                return { authTables: auth.authTables.namespaceForApp(appId) };
            else
                throw new renraku.ApiError(403, "forbidden: lacking privileges to edit app");
        }
        return {
            access: auth.access,
            checker: auth.checker,
            statsHub: auth.statsHub,
            appTables: auth.appTables,
            authTablesForPlatform: auth.authTables.namespaceForApp(DamnId.fromString(config.platform.appDetails.appId)),
            authorizeAppOwner,
        };
    };
    return {
        greenPolicy,
        anonPolicy,
        userPolicy,
        platformUserPolicy,
        appOwnerPolicy,
    };
}
//# sourceMappingURL=prepare-auth-policies.js.map