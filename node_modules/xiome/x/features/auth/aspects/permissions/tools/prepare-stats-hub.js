import * as renraku from "renraku";
import { day, month } from "../../../../../toolbox/goodtimes/times.js";
import { and, find } from "../../../../../toolbox/dbby/dbby-helpers.js";
export function prepareStatsHub({ appTables, authTables }) {
    return async function getStatsHub(userId) {
        async function throwForbiddenUser(appId) {
            const row = await appTables.owners.one(find({ appId }));
            if (row.userId.toString() !== userId.toString())
                throw new renraku.ApiError(403, "forbidden");
        }
        return {
            countUsers: async (appId) => {
                await throwForbiddenUser(appId);
                return await authTables.namespaceForApp(appId).users.accounts.count({ conditions: false });
            },
            countUsersActiveDaily: async (appId) => {
                await throwForbiddenUser(appId);
                const timeToStartCounting = Date.now() - day;
                return authTables.namespaceForApp(appId).users.latestLogins.count({
                    conditions: and({ greater: { time: timeToStartCounting } }),
                });
            },
            countUsersActiveMonthly: async (appId) => {
                await throwForbiddenUser(appId);
                const timeToStartCounting = Date.now() - month;
                return authTables.namespaceForApp(appId).users.latestLogins.count({
                    conditions: and({ greater: { time: timeToStartCounting } }),
                });
            },
        };
    };
}
//# sourceMappingURL=prepare-stats-hub.js.map