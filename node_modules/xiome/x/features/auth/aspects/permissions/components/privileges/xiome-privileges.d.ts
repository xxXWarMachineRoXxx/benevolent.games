import { makePermissionsModel } from "../../models/permissions-model.js";
import { ModalSystem } from "../../../../../../assembly/frontend/modal/types/modal-system.js";
import { PrivilegeDisplay } from "../../../users/routines/permissions/types/privilege-display.js";
import { ComponentWithShare } from "../../../../../../framework/component.js";
export declare class XiomePrivileges extends ComponentWithShare<{
    modals: ModalSystem;
    permissionsModel: ReturnType<typeof makePermissionsModel>;
}> {
    #private;
    get model(): {
        readable: import("../../../../../../toolbox/snapstate/parts/types.js").Readable<{
            active: boolean;
            accessOp: import("../../../../../../framework/ops.js").Op<import("../../../../types/auth-tokens.js").AccessPayload>;
            permissionsDisplay: import("../../../../../../framework/ops.js").Op<import("../../../users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        }>;
        subscribe: (listener: (context: import("../../../../../../toolbox/snapstate/parts/types.js").Readable<{
            active: boolean;
            accessOp: import("../../../../../../framework/ops.js").Op<import("../../../../types/auth-tokens.js").AccessPayload>;
            permissionsDisplay: import("../../../../../../framework/ops.js").Op<import("../../../users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        }>) => void) => () => void;
        track: <X>(observer: import("../../../../../../toolbox/snapstate/parts/types.js").Observer<{
            active: boolean;
            accessOp: import("../../../../../../framework/ops.js").Op<import("../../../../types/auth-tokens.js").AccessPayload>;
            permissionsDisplay: import("../../../../../../framework/ops.js").Op<import("../../../users/routines/permissions/types/permissions-display.js").PermissionsDisplay>;
        }, X>, reaction?: import("../../../../../../toolbox/snapstate/parts/types.js").Reaction<X>) => () => void;
        getAccess: () => import("../../../../types/auth-tokens.js").AccessPayload;
        initialize: () => Promise<void>;
        getUserCanCustomizePermissions: () => boolean;
        createRole: ({ label }: {
            label: string;
        }) => Promise<void>;
        deleteRole: ({ roleId: roleIdString }: {
            roleId: string;
        }) => Promise<void>;
        assignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
            roleId: string;
            privilegeId: string;
        }) => Promise<void>;
        unassignPrivilege: ({ roleId: roleIdString, privilegeId: privilegeIdString }: {
            roleId: string;
            privilegeId: string;
        }) => Promise<void>;
        deletePrivilege: ({ privilegeId: privilegeIdString }: {
            privilegeId: string;
        }) => Promise<void>;
        createPrivilege: ({ label }: {
            label: string;
        }) => Promise<PrivilegeDisplay>;
        updateAccessOp(op: import("../../../../../../framework/ops.js").Op<import("../../../../types/auth-tokens.js").AccessPayload>): Promise<void>;
    };
    init(): void;
    render(): import("lit-html").TemplateResult<1>;
}
