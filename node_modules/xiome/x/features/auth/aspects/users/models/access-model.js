import { ops } from "../../../../../framework/ops.js";
import { AccessLoginExpiredError } from "./errors/access-errors.js";
import { snapstate } from "../../../../../toolbox/snapstate/snapstate.js";
import { isTokenValid } from "../../../utils/tokens/is-token-valid.js";
export function makeAccessModel({ authMediator, loginService }) {
    const state = snapstate({
        accessOp: ops.none(),
    });
    authMediator.subscribeToAccessChange(access => {
        state.writable.accessOp = ops.ready(access);
    });
    async function accessOperation(promise) {
        return ops.operation({
            promise,
            setOp: op => state.writable.accessOp = op,
        });
    }
    const loginFacilities = {
        async useExistingLogin() {
            await accessOperation(authMediator.initialize());
        },
        async sendLoginLink(email) {
            return loginService.sendLoginLink({ email });
        },
        async login(loginToken) {
            try {
                if (isTokenValid(loginToken))
                    await accessOperation(loginService
                        .authenticateViaLoginToken({ loginToken })
                        .then(tokens => authMediator.login(tokens)));
                else
                    throw new AccessLoginExpiredError();
            }
            catch (error) {
                console.error(error);
                state.writable.accessOp = ops.none();
                await accessOperation(authMediator.initialize());
                throw error;
            }
        },
        async logout() {
            await ops.operation({
                promise: authMediator.logout(),
                setOp: op => state.writable.accessOp = op,
            });
        },
        async reauthorize() {
            await accessOperation(authMediator.reauthorize());
        },
    };
    return {
        readable: state.readable,
        track: state.track,
        subscribe: state.subscribe,
        ...loginFacilities,
        getAccessOp() {
            return state.readable.accessOp;
        },
        getAccess() {
            return ops.value(state.readable.accessOp);
        },
        getValidAccess() {
            return authMediator.getValidAccess();
        },
    };
}
//# sourceMappingURL=access-model.js.map