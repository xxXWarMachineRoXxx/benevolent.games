import { Op } from "../../../../../framework/ops.js";
import { AccessPayload } from "../../../types/auth-tokens.js";
import { AccessModelOptions } from "./types/access-model-options.js";
export declare function makeAccessModel({ authMediator, loginService }: AccessModelOptions): {
    getAccessOp(): Op<AccessPayload>;
    getAccess(): AccessPayload;
    getValidAccess(): Promise<AccessPayload>;
    useExistingLogin(): Promise<void>;
    sendLoginLink(email: string): Promise<void>;
    login(loginToken: string): Promise<void>;
    logout(): Promise<void>;
    reauthorize(): Promise<void>;
    readable: import("../../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
    }>;
    track: <X>(observer: import("../../../../../toolbox/snapstate/parts/types.js").Observer<{
        accessOp: Op<AccessPayload>;
    }, X>, reaction?: import("../../../../../toolbox/snapstate/parts/types.js").Reaction<X>) => () => void;
    subscribe: (listener: (context: import("../../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
    }>) => void) => () => void;
};
