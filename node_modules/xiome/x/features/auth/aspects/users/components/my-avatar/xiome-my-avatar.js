var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import styles from "./xiome-my-avatar.css.js";
import { renderOp } from "../../../../../../framework/op-rendering/render-op.js";
import { AutowatcherComponentWithShare, html, mixinStyles } from "../../../../../../framework/component.js";
let XiomeMyAvatar = class XiomeMyAvatar extends AutowatcherComponentWithShare {
    render() {
        const accessOp = this.share.accessModel.getAccessOp();
        return renderOp(accessOp, access => html `
			<xio-avatar
				.spec=${access?.user?.profile.avatar}
				part="xio-avatar"
			></xio-avatar>
		`);
    }
};
XiomeMyAvatar = __decorate([
    mixinStyles(styles)
], XiomeMyAvatar);
export { XiomeMyAvatar };
//# sourceMappingURL=xiome-my-avatar.js.map