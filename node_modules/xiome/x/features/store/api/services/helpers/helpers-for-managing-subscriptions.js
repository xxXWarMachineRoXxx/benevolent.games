export const helpersForManagingSubscriptions = ({ authTables, storeTables, stripeAccountId, stripeLiaisonAccount, generateId, }) => {
    const time = Date.now();
    function makeRoleRow(roleId, label) {
        return {
            label,
            roleId,
            hard: true,
            public: true,
            assignable: true,
            time,
        };
    }
    return {
        async createStripeProductAndPrice(options) {
            const { id: stripeProductId } = await stripeLiaisonAccount.products.create({
                name: options.planLabel
            });
            const { id: stripePriceId } = await stripeLiaisonAccount.prices.create({
                currency: options.tierCurrency,
                unit_amount: options.tierPrice,
                recurring: { interval: options.tierInterval },
            });
            return { stripeProductId, stripePriceId };
        },
        async createPlanAndTier({ planLabel, tierLabel, stripePriceId, stripeProductId, }) {
            const planId = generateId();
            const planRoleId = generateId();
            const tierId = generateId();
            const tierRoleId = generateId();
            await authTables.permissions.role.create(makeRoleRow(planRoleId, planLabel), makeRoleRow(tierRoleId, tierLabel));
            await storeTables.subscription.plans.create({
                planId,
                label: planLabel,
                roleId: planRoleId,
                time,
                stripeProductId,
                stripeAccountId,
            });
            await storeTables.subscription.tiers.create({
                tierId,
                planId,
                label: tierLabel,
                roleId: tierRoleId,
                time,
                stripePriceId,
                stripeAccountId,
            });
            return { planId, tierId, time };
        },
    };
};
//# sourceMappingURL=helpers-for-managing-subscriptions.js.map