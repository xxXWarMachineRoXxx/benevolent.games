import { DamnId } from "../../../../../toolbox/damnedb/damn-id.js";
import { SubscriptionPlan } from "../../../types/store-concepts.js";
import { SubscriptionPlanRow, SubscriptionTierRow } from "../../../types/store-tables.js";
import { StoreLinkedAuth } from "../../../types/store-metas-and-auths.js";
export declare const helpersForListingSubscriptions: ({ storeTables, stripeAccountId, stripeLiaisonAccount, }: StoreLinkedAuth) => {
    fetchOurSubscriptionPlanRecords(): Promise<SubscriptionPlanRow[]>;
    crossReferencePlansWithStripeProducts(planRows: SubscriptionPlanRow[]): Promise<StripeCrossReference>;
    deletePlans(planIds: DamnId[]): Promise<void>;
    fetchOurRecordsOfPlanTiers(planIds: DamnId[]): Promise<SubscriptionTierRow[]>;
    crossReferenceTiersWithStripePrices(tierRows: SubscriptionTierRow[]): Promise<StripeCrossReference>;
    deleteTiers(tierIds: DamnId[]): Promise<void>;
    identifyTiersWithoutParentPlan(tierRows: SubscriptionTierRow[], presentPlanIds: DamnId[]): DamnId[];
    dedupeIds(ids: DamnId[]): DamnId[];
    deleteTiersWithoutParentPlan(tierIds: DamnId[]): Promise<void>;
    assembleSubscriptionPlans({ plans, tiers }: {
        plans: {
            rows: SubscriptionPlanRow[];
            cross: StripeCrossReference;
        };
        tiers: {
            rows: SubscriptionTierRow[];
            cross: StripeCrossReference;
        };
    }): SubscriptionPlan[];
};
export declare type BasicStripeResource = undefined | {
    active: boolean;
};
export interface StripeCrossReference {
    missingIds: DamnId[];
    presentIds: DamnId[];
    activeIds: DamnId[];
}
