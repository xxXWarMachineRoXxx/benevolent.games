import * as renraku from "renraku";
import { StoreAuth, StoreMeta } from "../types/store-metas-and-auths.js";
import { StoreApiOptions, StripeConnectStatus } from "../types/store-concepts.js";
export declare const storeApi: ({ storeTables, stripeLiaison, basePolicy, ...common }: StoreApiOptions) => {
    connectService: renraku.Service<StoreMeta, StoreAuth, {
        loadConnectDetails(): Promise<{
            connectDetails: import("../types/store-concepts.js").StripeConnectDetails;
            connectStatus: StripeConnectStatus;
        }>;
        generateConnectSetupLink(): Promise<{
            stripeAccountId: string;
            stripeAccountSetupLink: string;
        }>;
        generateStripeLoginLink(): Promise<string>;
        loadConnectStatus(): Promise<StripeConnectStatus>;
        pause(): Promise<void>;
        resume(): Promise<void>;
    }>;
    subscriptionPlanningService: renraku.Service<StoreMeta, import("../types/store-metas-and-auths.js").StoreLinkedAuth, {
        listSubscriptionPlans(): Promise<import("../types/store-concepts.js").SubscriptionPlan[]>;
        addPlan(inputs: {
            planLabel: string;
            tierLabel: string;
            tierPrice: number;
        }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
        addTier({}: {
            label: string;
            price: number;
            planId: string;
        }): Promise<any>;
        editPlan(): Promise<void>;
        editTier(): Promise<void>;
    }>;
    subscriptionShoppingService: renraku.Service<StoreMeta, import("../types/store-metas-and-auths.js").StoreLinkedAuth, {
        loadSubscriptionPlans(): Promise<void>;
        subscribeToTier(): Promise<void>;
        unsubscribeFromTier(): Promise<void>;
    }>;
    billingService: renraku.Service<StoreMeta, import("../types/store-metas-and-auths.js").StoreLinkedAuth, {
        getPaymentMethodDetails(): Promise<void>;
        establishPaymentMethod(): Promise<void>;
        updatePaymentMethod(): Promise<void>;
        disconnectPaymentMethod(): Promise<void>;
    }>;
};
