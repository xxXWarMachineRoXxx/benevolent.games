import { Op } from "../../../../framework/ops.js";
import { AccessPayload } from "../../../auth/types/auth-tokens.js";
import { StripeConnectDetails, StripeConnectStatus, SubscriptionPlan } from "../../types/store-concepts.js";
export declare function makeStoreState(): {
    readable: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<StripeConnectStatus>;
        connectDetailsOp: Op<StripeConnectDetails>;
        subscriptionPlansOp: Op<SubscriptionPlan[]>;
    }>;
    writable: {
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<StripeConnectStatus>;
        connectDetailsOp: Op<StripeConnectDetails>;
        subscriptionPlansOp: Op<SubscriptionPlan[]>;
    };
    subscribe: (listener: (context: import("../../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<StripeConnectStatus>;
        connectDetailsOp: Op<StripeConnectDetails>;
        subscriptionPlansOp: Op<SubscriptionPlan[]>;
    }>) => void) => () => void;
    track<X>(observer: import("../../../../toolbox/snapstate/parts/types.js").Observer<{
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<StripeConnectStatus>;
        connectDetailsOp: Op<StripeConnectDetails>;
        subscriptionPlansOp: Op<SubscriptionPlan[]>;
    }, X>, reaction?: import("../../../../toolbox/snapstate/parts/types.js").Reaction<X>): () => void;
    wait(): Promise<void>;
};
