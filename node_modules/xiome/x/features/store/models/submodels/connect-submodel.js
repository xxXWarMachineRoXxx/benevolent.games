import { pub } from "../../../../toolbox/pub.js";
import { ops } from "../../../../framework/ops.js";
import { makeActivator } from "../utils/make-activator.js";
import { StripeConnectStatus } from "../../types/store-concepts.js";
export function makeConnectSubmodel({ state, allowance, connectService, triggerStripeConnectPopup, }) {
    const change = pub();
    async function loadConnectDetails() {
        if (allowance.connectStripeAccount) {
            await ops.operation({
                promise: connectService.loadConnectDetails(),
                setOp: op => {
                    state.writable.connectStatusOp = ops.replaceValue(op, ops.value(op)?.connectStatus);
                    state.writable.connectDetailsOp = ops.replaceValue(op, ops.value(op)?.connectDetails);
                },
            });
        }
        else if (allowance.manageStore) {
            await ops.operation({
                promise: connectService.loadConnectStatus(),
                setOp: op => state.writable.connectStatusOp = op,
            });
        }
    }
    const activator = makeActivator(loadConnectDetails);
    return {
        activate: activator.activate,
        refresh: activator.refreshIfActivated,
        onChange: change.subscribe,
        async connectStripeAccount() {
            await triggerStripeConnectPopup(await connectService.generateConnectSetupLink());
            await loadConnectDetails();
            await change.publish();
        },
        async generateStripeLoginLink() {
            if (ops.value(state.readable.connectStatusOp) === StripeConnectStatus.Unlinked)
                throw new Error("no stripe account to generate login link for");
            return connectService.generateStripeLoginLink();
        },
        async pause() {
            await connectService.pause();
            state.writable.connectStatusOp = ops.ready(StripeConnectStatus.Paused);
            if (allowance.manageStore)
                state.writable.connectDetailsOp = ops.ready({
                    ...ops.value(state.readable.connectDetailsOp),
                    paused: true,
                });
        },
        async resume() {
            await connectService.resume();
            state.writable.connectStatusOp = ops.ready(StripeConnectStatus.Ready);
            if (allowance.manageStore)
                state.writable.connectDetailsOp = ops.ready({
                    ...ops.value(state.readable.connectDetailsOp),
                    paused: false,
                });
        },
    };
}
//# sourceMappingURL=connect-submodel.js.map