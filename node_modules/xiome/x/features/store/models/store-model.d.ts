import { Service } from "../../../types/service.js";
import { Op } from "../../../framework/ops.js";
import { AccessPayload } from "../../auth/types/auth-tokens.js";
import { makeConnectService } from "../api/services/connect-service.js";
import { FlexStorage } from "../../../toolbox/flex-storage/types/flex-storage.js";
import { TriggerStripeConnectPopup, TriggerCheckoutPopup } from "../types/store-popups.js";
import { makeSubscriptionPlanningService } from "../api/services/subscription-planning-service.js";
export declare function makeStoreModel(options: {
    appId: string;
    storageForCache: FlexStorage;
    connectService: Service<typeof makeConnectService>;
    subscriptionPlanningService: Service<typeof makeSubscriptionPlanningService>;
    triggerCheckoutPopup: TriggerCheckoutPopup;
    triggerStripeConnectPopup: TriggerStripeConnectPopup;
}): {
    state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<import("../types/store-concepts.js").StripeConnectStatus>;
        connectDetailsOp: Op<import("../types/store-concepts.js").StripeConnectDetails>;
        subscriptionPlansOp: Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
    }>;
    subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
        accessOp: Op<AccessPayload>;
        connectStatusOp: Op<import("../types/store-concepts.js").StripeConnectStatus>;
        connectDetailsOp: Op<import("../types/store-concepts.js").StripeConnectDetails>;
        subscriptionPlansOp: Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
    }>) => void) => () => void;
    allowance: {
        readonly manageStore: boolean;
        readonly connectStripeAccount: boolean;
        readonly giveAwayFreebies: boolean;
    };
    connectSubmodel: {
        activate: () => Promise<void>;
        refresh: () => Promise<void>;
        onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
        connectStripeAccount(): Promise<void>;
        generateStripeLoginLink(): Promise<string>;
        pause(): Promise<void>;
        resume(): Promise<void>;
    };
    subscriptionPlanningSubmodel: {
        activate: () => Promise<void>;
        refresh: () => Promise<void>;
        addPlan(options: {
            planLabel: string;
            tierLabel: string;
            tierPrice: number;
        }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
    };
    updateAccessOp(op: Op<AccessPayload>): Promise<void>;
};
