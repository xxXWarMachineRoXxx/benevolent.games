import { pubsub, pubsubs } from "../../../toolbox/pubsub.js";
import { find } from "../../../toolbox/dbby/dbby-helpers.js";
import { stripeWebhooks } from "./webhooks/stripe-webhooks.js";
import { mockStripeLiaison } from "./mocks/mock-stripe-liaison.js";
import { mockStripeTables } from "./mocks/tables/mock-stripe-tables.js";
export async function mockStripeCircuit({ rando, tableStorage, authTables, storeTables, }) {
    const { publishers: webhookPublishers, subscribers: webhookSubscribers, } = pubsubs({
        "checkout.session.completed": pubsub(),
        "invoice.paid": pubsub(),
        "invoice.payment_failed": pubsub(),
        "customer.subscription.updated": pubsub(),
    });
    const stripeTables = await mockStripeTables({ tableStorage });
    const stripeLiaison = mockStripeLiaison({
        rando,
        tables: stripeTables,
        webhooks: webhookPublishers,
    });
    const webhooks = stripeWebhooks({
        authTables,
        storeTables,
        stripeLiaison,
        logger: console,
    });
    for (const [key, subscribe] of Object.entries(webhookSubscribers))
        subscribe(webhooks[key].bind(webhooks));
    return {
        stripeLiaison,
        mockStripeOperations: {
            async linkStripeAccount(stripeAccountId) {
                await stripeTables.accounts.update({
                    ...find({ id: stripeAccountId }),
                    write: {
                        email: "fake-stripe-account-email@xiome.io",
                        charges_enabled: true,
                        payouts_enabled: true,
                        details_submitted: true,
                    },
                });
            },
            async linkStripeAccountThatIsIncomplete(stripeAccountId) {
                await stripeTables.accounts.update({
                    ...find({ id: stripeAccountId }),
                    write: {
                        charges_enabled: false,
                        payouts_enabled: false,
                        details_submitted: false,
                    },
                });
            },
            // async purchaseSubscription(stripeAccountId: string) {},
        },
    };
}
//# sourceMappingURL=mock-stripe-circuit.js.map