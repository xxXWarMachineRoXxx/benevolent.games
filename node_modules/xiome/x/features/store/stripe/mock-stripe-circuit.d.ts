/// <reference types="stripe/types/crypto/crypto" />
/// <reference types="stripe/types/shared" />
/// <reference types="stripe/types/Errors" />
/// <reference types="stripe/types/OAuth" />
/// <reference types="stripe/types/Webhooks" />
/// <reference types="stripe/types/2020-08-27/AccountLinks" />
/// <reference types="stripe/types/2020-08-27/Accounts" />
/// <reference types="stripe/types/2020-08-27/AlipayAccounts" />
/// <reference types="stripe/types/2020-08-27/ApplePayDomains" />
/// <reference types="stripe/types/2020-08-27/ApplicationFees" />
/// <reference types="stripe/types/2020-08-27/Applications" />
/// <reference types="stripe/types/2020-08-27/Balance" />
/// <reference types="stripe/types/2020-08-27/BalanceTransactions" />
/// <reference types="stripe/types/2020-08-27/BankAccounts" />
/// <reference types="stripe/types/2020-08-27/BillingPortal/Configurations" />
/// <reference types="stripe/types/2020-08-27/BillingPortal/Sessions" />
/// <reference types="stripe/types/2020-08-27/BitcoinReceivers" />
/// <reference types="stripe/types/2020-08-27/BitcoinTransactions" />
/// <reference types="stripe/types/2020-08-27/Capabilities" />
/// <reference types="stripe/types/2020-08-27/Cards" />
/// <reference types="stripe/types/2020-08-27/Charges" />
/// <reference types="stripe/types/2020-08-27/Checkout/Sessions" />
/// <reference types="stripe/types/2020-08-27/ConnectCollectionTransfers" />
/// <reference types="stripe/types/2020-08-27/CountrySpecs" />
/// <reference types="stripe/types/2020-08-27/Coupons" />
/// <reference types="stripe/types/2020-08-27/CreditNoteLineItems" />
/// <reference types="stripe/types/2020-08-27/CreditNotes" />
/// <reference types="stripe/types/2020-08-27/CustomerBalanceTransactions" />
/// <reference types="stripe/types/2020-08-27/CustomerSources" />
/// <reference types="stripe/types/2020-08-27/Customers" />
/// <reference types="stripe/types/2020-08-27/Discounts" />
/// <reference types="stripe/types/2020-08-27/Disputes" />
/// <reference types="stripe/types/2020-08-27/EphemeralKeys" />
/// <reference types="stripe/types/2020-08-27/Events" />
/// <reference types="stripe/types/2020-08-27/ExchangeRates" />
/// <reference types="stripe/types/2020-08-27/ExternalAccounts" />
/// <reference types="stripe/types/2020-08-27/FeeRefunds" />
/// <reference types="stripe/types/2020-08-27/FileLinks" />
/// <reference types="stripe/types/2020-08-27/Files" />
/// <reference types="stripe/types/2020-08-27/Identity/VerificationReports" />
/// <reference types="stripe/types/2020-08-27/Identity/VerificationSessions" />
/// <reference types="stripe/types/2020-08-27/InvoiceItems" />
/// <reference types="stripe/types/2020-08-27/InvoiceLineItems" />
/// <reference types="stripe/types/2020-08-27/Invoices" />
/// <reference types="stripe/types/2020-08-27/IssuerFraudRecords" />
/// <reference types="stripe/types/2020-08-27/Issuing/Authorizations" />
/// <reference types="stripe/types/2020-08-27/Issuing/CardDetails" />
/// <reference types="stripe/types/2020-08-27/Issuing/Cardholders" />
/// <reference types="stripe/types/2020-08-27/Issuing/Cards" />
/// <reference types="stripe/types/2020-08-27/Issuing/Disputes" />
/// <reference types="stripe/types/2020-08-27/Issuing/Transactions" />
/// <reference types="stripe/types/2020-08-27/LineItems" />
/// <reference types="stripe/types/2020-08-27/LoginLinks" />
/// <reference types="stripe/types/2020-08-27/Mandates" />
/// <reference types="stripe/types/2020-08-27/OrderItems" />
/// <reference types="stripe/types/2020-08-27/OrderReturns" />
/// <reference types="stripe/types/2020-08-27/Orders" />
/// <reference types="stripe/types/2020-08-27/PaymentIntents" />
/// <reference types="stripe/types/2020-08-27/PaymentMethods" />
/// <reference types="stripe/types/2020-08-27/Payouts" />
/// <reference types="stripe/types/2020-08-27/Persons" />
/// <reference types="stripe/types/2020-08-27/Plans" />
/// <reference types="stripe/types/2020-08-27/PlatformTaxFees" />
/// <reference types="stripe/types/2020-08-27/Prices" />
/// <reference types="stripe/types/2020-08-27/Products" />
/// <reference types="stripe/types/2020-08-27/PromotionCodes" />
/// <reference types="stripe/types/2020-08-27/Quotes" />
/// <reference types="stripe/types/2020-08-27/Radar/EarlyFraudWarnings" />
/// <reference types="stripe/types/2020-08-27/Radar/ValueListItems" />
/// <reference types="stripe/types/2020-08-27/Radar/ValueLists" />
/// <reference types="stripe/types/2020-08-27/Recipients" />
/// <reference types="stripe/types/2020-08-27/Refunds" />
/// <reference types="stripe/types/2020-08-27/Reporting/ReportRuns" />
/// <reference types="stripe/types/2020-08-27/Reporting/ReportTypes" />
/// <reference types="stripe/types/2020-08-27/ReserveTransactions" />
/// <reference types="stripe/types/2020-08-27/Reviews" />
/// <reference types="stripe/types/2020-08-27/SKUs" />
/// <reference types="stripe/types/2020-08-27/SetupAttempts" />
/// <reference types="stripe/types/2020-08-27/SetupIntents" />
/// <reference types="stripe/types/2020-08-27/ShippingRates" />
/// <reference types="stripe/types/2020-08-27/Sigma/ScheduledQueryRuns" />
/// <reference types="stripe/types/2020-08-27/SourceMandateNotifications" />
/// <reference types="stripe/types/2020-08-27/SourceTransactions" />
/// <reference types="stripe/types/2020-08-27/Sources" />
/// <reference types="stripe/types/2020-08-27/SubscriptionItems" />
/// <reference types="stripe/types/2020-08-27/SubscriptionSchedules" />
/// <reference types="stripe/types/2020-08-27/Subscriptions" />
/// <reference types="stripe/types/2020-08-27/TaxCodes" />
/// <reference types="stripe/types/2020-08-27/TaxDeductedAtSources" />
/// <reference types="stripe/types/2020-08-27/TaxIds" />
/// <reference types="stripe/types/2020-08-27/TaxRates" />
/// <reference types="stripe/types/2020-08-27/Terminal/ConnectionTokens" />
/// <reference types="stripe/types/2020-08-27/Terminal/Locations" />
/// <reference types="stripe/types/2020-08-27/Terminal/Readers" />
/// <reference types="stripe/types/2020-08-27/Tokens" />
/// <reference types="stripe/types/2020-08-27/Topups" />
/// <reference types="stripe/types/2020-08-27/TransferReversals" />
/// <reference types="stripe/types/2020-08-27/Transfers" />
/// <reference types="stripe/types/2020-08-27/UsageRecordSummaries" />
/// <reference types="stripe/types/2020-08-27/UsageRecords" />
/// <reference types="stripe/types/2020-08-27/WebhookEndpoints" />
/// <reference types="stripe" />
/// <reference types="stripe/types/lib" />
/// <reference types="stripe/types/net/net" />
import { Rando } from "../../../toolbox/get-rando.js";
import { StoreTables } from "../types/store-tables.js";
import { AuthTables } from "../../auth/types/auth-tables.js";
import { FlexStorage } from "../../../toolbox/flex-storage/types/flex-storage.js";
import { UnconstrainedTables } from "../../../framework/api/types/table-namespacing-for-apps.js";
export declare function mockStripeCircuit({ rando, tableStorage, authTables, storeTables, }: {
    rando: Rando;
    tableStorage: FlexStorage;
    authTables: UnconstrainedTables<AuthTables>;
    storeTables: UnconstrainedTables<StoreTables>;
}): Promise<{
    stripeLiaison: {
        accounts: {
            create(params: import("stripe").Stripe.AccountCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
            retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Account>>;
            createLoginLink(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.LoginLink>>;
        };
        accountLinks: {
            create(params: import("stripe").Stripe.AccountLinkCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.AccountLink>>;
        };
        account(stripeAccount: string): {
            customers: {
                create(params: import("stripe").Stripe.CustomerCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer | import("stripe").Stripe.DeletedCustomer>>;
                update(id: string, params: import("stripe").Stripe.CustomerUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Customer>>;
            };
            products: {
                create(params: import("stripe").Stripe.ProductCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
                update(id: string, params: import("stripe").Stripe.ProductUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Product>>;
            };
            prices: {
                create(params: import("stripe").Stripe.PriceCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
                update(id: string, params: import("stripe").Stripe.PriceUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Price>>;
            };
            paymentMethods: {
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.PaymentMethod>>;
            };
            setupIntents: {
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.SetupIntent>>;
            };
            subscriptions: {
                retrieve(id: string): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
                update(id: string, params: import("stripe").Stripe.SubscriptionUpdateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Subscription>>;
            };
            checkout: {
                sessions: {
                    create(params: import("stripe").Stripe.Checkout.SessionCreateParams): Promise<import("stripe").Stripe.Response<import("stripe").Stripe.Checkout.Session>>;
                };
            };
        };
    };
    mockStripeOperations: {
        linkStripeAccount(stripeAccountId: string): Promise<void>;
        linkStripeAccountThatIsIncomplete(stripeAccountId: string): Promise<void>;
    };
}>;
