import { day } from "../../../../../toolbox/goodtimes/times.js";
import { and, find } from "../../../../../toolbox/dbby/dbby-helpers.js";
export function mockLiaisonUtils({ rando, tables }) {
    const generateId = () => rando.randomId();
    const procedures = {
        async insertAccount(account) {
            await tables.accounts.create(account);
        },
        async insertCustomer(customer) {
            await tables.customers.create(customer);
        },
        async insertSetupIntent(setupIntent) {
            await tables.setupIntents.create(setupIntent);
        },
        async insertSubscription(subscription) {
            await tables.subscriptions.create(subscription);
        },
        async insertPaymentMethod(paymentMethod) {
            await tables.paymentMethods.create(paymentMethod);
        },
        async fetchAccount(id) {
            return tables.accounts.one(find({ id }));
        },
        async fetchCustomer(id) {
            return tables.customers.one({ conditions: and({ equal: { id } }) });
        },
        async fetchSubscription(id) {
            return tables.subscriptions.one({ conditions: and({ equal: { id } }) });
        },
        async fetchPaymentMethod(id) {
            return tables.paymentMethods.one({ conditions: and({ equal: { id } }) });
        },
        async fetchSetupIntent(id) {
            return tables.setupIntents.one({ conditions: and({ equal: { id } }) });
        },
        async updateCustomer(customerId, customer) {
            return tables.customers.update({
                ...find({ id: customerId }),
                write: customer,
            });
        },
    };
    const initializers = {
        sessionForSubscriptionPurchase({ userId, customer, subscription, }) {
            return {
                id: generateId().toString(),
                mode: "subscription",
                customer: customer.id,
                client_reference_id: userId,
                subscription: subscription.id,
            };
        },
        sessionForSubscriptionUpdate({ userId, customer, setupIntent, subscriptionId, }) {
            return {
                id: generateId().toString(),
                mode: "setup",
                customer: customer.id,
                client_reference_id: userId,
                setup_intent: setupIntent.id,
                metadata: {
                    flow: "update-subscription",
                    customer_id: customer.id,
                    subscription_id: subscriptionId,
                },
            };
        },
        async account() {
            const account = {
                id: generateId().toString(),
                email: "",
                type: "standard",
                charges_enabled: false,
                details_submitted: false,
                payouts_enabled: false,
                business_profile: undefined,
                business_type: undefined,
                country: undefined,
                default_currency: undefined,
                object: undefined,
                settings: undefined,
            };
            await procedures.insertAccount(account);
            return account;
        },
        async customer() {
            const customer = {
                id: generateId().toString()
            };
            await procedures.insertCustomer(customer);
            return customer;
        },
        async paymentMethod() {
            const paymentMethod = {
                id: generateId().toString(),
                card: {
                    brand: "FAKEVISA",
                    country: "US",
                    exp_year: 2020,
                    exp_month: 10,
                    last4: rando.randomSequence(4, [..."0123456789"]),
                    description: "description",
                    funding: "credit",
                    checks: null,
                    wallet: null,
                    networks: null,
                    three_d_secure_usage: null,
                },
            };
            await procedures.insertPaymentMethod(paymentMethod);
            return paymentMethod;
        },
        async setupIntent({ customer, subscription, paymentMethod }) {
            const setupIntent = {
                id: generateId().toString(),
                customer: customer.id,
                payment_method: paymentMethod.id,
                metadata: {
                    subscription_id: subscription.id
                },
            };
            await procedures.insertSetupIntent(setupIntent);
            return setupIntent;
        },
        async subscription({ planId, customer, paymentMethod }) {
            const subscription = {
                id: generateId().toString(),
                status: "active",
                // plan: {id: planId},
                customer: customer.id,
                cancel_at_period_end: false,
                current_period_end: Date.now() + (30 * day),
                default_payment_method: paymentMethod.id,
            };
            await procedures.insertSubscription(subscription);
            return subscription;
        },
    };
    return { procedures, initializers };
}
//# sourceMappingURL=mock-liaison-utils.js.map