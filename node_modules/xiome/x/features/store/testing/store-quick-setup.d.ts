import { storePrivileges } from "../store-privileges.js";
declare type StorePrivilegeKey = keyof typeof storePrivileges;
export declare function setupSimpleStoreClient(...privileges: StorePrivilegeKey[]): Promise<{
    storeModel: {
        state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
            connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
            connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
            subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
        }>;
        subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
            accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
            connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
            connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
            subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
        }>) => void) => () => void;
        allowance: {
            readonly manageStore: boolean;
            readonly connectStripeAccount: boolean;
            readonly giveAwayFreebies: boolean;
        };
        connectSubmodel: {
            activate: () => Promise<void>;
            refresh: () => Promise<void>;
            onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
            connectStripeAccount(): Promise<void>;
            generateStripeLoginLink(): Promise<string>;
            pause(): Promise<void>;
            resume(): Promise<void>;
        };
        subscriptionPlanningSubmodel: {
            activate: () => Promise<void>;
            refresh: () => Promise<void>;
            addPlan(options: {
                planLabel: string;
                tierLabel: string;
                tierPrice: number;
            }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
        };
        updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
    };
    setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
    setLoggedOut: () => Promise<void>;
    setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
    rigStripeLinkToFail(): void;
    rigStripeLinkToSucceed(): void;
}>;
export declare function setupLinkedStore(): Promise<{
    makeClient: () => Promise<{
        storeModel: {
            state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>;
            subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>) => void) => () => void;
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            connectSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                connectStripeAccount(): Promise<void>;
                generateStripeLoginLink(): Promise<string>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            subscriptionPlanningSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                addPlan(options: {
                    planLabel: string;
                    tierLabel: string;
                    tierPrice: number;
                }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
        setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
        setLoggedOut: () => Promise<void>;
        setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
        rigStripeLinkToFail(): void;
        rigStripeLinkToSucceed(): void;
    }>;
    merchantClient: {
        storeModel: {
            state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>;
            subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>) => void) => () => void;
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            connectSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                connectStripeAccount(): Promise<void>;
                generateStripeLoginLink(): Promise<string>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            subscriptionPlanningSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                addPlan(options: {
                    planLabel: string;
                    tierLabel: string;
                    tierPrice: number;
                }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
        setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
        setLoggedOut: () => Promise<void>;
        setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
        rigStripeLinkToFail(): void;
        rigStripeLinkToSucceed(): void;
    };
    makeAnotherMerchantClient: () => Promise<{
        storeModel: {
            state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>;
            subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>) => void) => () => void;
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            connectSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                connectStripeAccount(): Promise<void>;
                generateStripeLoginLink(): Promise<string>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            subscriptionPlanningSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                addPlan(options: {
                    planLabel: string;
                    tierLabel: string;
                    tierPrice: number;
                }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
        setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
        setLoggedOut: () => Promise<void>;
        setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
        rigStripeLinkToFail(): void;
        rigStripeLinkToSucceed(): void;
    }>;
    makePlebeianClient(): Promise<{
        storeModel: {
            state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>;
            subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>) => void) => () => void;
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            connectSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                connectStripeAccount(): Promise<void>;
                generateStripeLoginLink(): Promise<string>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            subscriptionPlanningSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                addPlan(options: {
                    planLabel: string;
                    tierLabel: string;
                    tierPrice: number;
                }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
        setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
        setLoggedOut: () => Promise<void>;
        setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
        rigStripeLinkToFail(): void;
        rigStripeLinkToSucceed(): void;
    }>;
    makeClerkClient(): Promise<{
        storeModel: {
            state: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>;
            subscribe: (listener: (context: import("../../../toolbox/snapstate/parts/types.js").Readable<{
                accessOp: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>;
                connectStatusOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectStatus>;
                connectDetailsOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").StripeConnectDetails>;
                subscriptionPlansOp: import("../../../framework/ops.js").Op<import("../types/store-concepts.js").SubscriptionPlan[]>;
            }>) => void) => () => void;
            allowance: {
                readonly manageStore: boolean;
                readonly connectStripeAccount: boolean;
                readonly giveAwayFreebies: boolean;
            };
            connectSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                onChange: (...listeners: (() => void | Promise<void>)[]) => () => void;
                connectStripeAccount(): Promise<void>;
                generateStripeLoginLink(): Promise<string>;
                pause(): Promise<void>;
                resume(): Promise<void>;
            };
            subscriptionPlanningSubmodel: {
                activate: () => Promise<void>;
                refresh: () => Promise<void>;
                addPlan(options: {
                    planLabel: string;
                    tierLabel: string;
                    tierPrice: number;
                }): Promise<import("../types/store-concepts.js").SubscriptionPlan>;
            };
            updateAccessOp(op: import("../../../framework/ops.js").Op<import("../../auth/types/auth-tokens.js").AccessPayload>): Promise<void>;
        };
        setAccess: (access: import("../../auth/types/auth-tokens.js").AccessPayload) => Promise<void>;
        setLoggedOut: () => Promise<void>;
        setAccessWithPrivileges: (...privileges: string[]) => Promise<void>;
        rigStripeLinkToFail(): void;
        rigStripeLinkToSucceed(): void;
    }>;
}>;
export {};
