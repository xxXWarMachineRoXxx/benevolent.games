export declare function prepareMockAuth(): Promise<{
    appId: import("../../toolbox/damnedb/damn-id.js").DamnId;
    rando: {
        random: () => number;
        compare: (a: string, b: string) => boolean;
        randomId: () => import("../../toolbox/damnedb/damn-id.js").DamnId;
        randomBuffer: (bytes: number) => ArrayBuffer;
        randomSample: <T>(palette: T[]) => T;
        randomSequence: (length: number, palette: string[]) => string;
    };
    config: import("../../assembly/backend/types/secret-config.js").SecretConfig;
    storage: import("../../toolbox/flex-storage/types/flex-storage.js").FlexStorage;
    appOrigin: string;
    authPolicies: {
        greenPolicy: import("renraku").Policy<undefined, import("../../features/auth/types/auth-metas.js").GreenAuth>;
        anonPolicy: import("renraku").Policy<import("../../features/auth/types/auth-metas.js").AnonMeta, import("../../features/auth/types/auth-metas.js").LoginAuth>;
        userPolicy: import("renraku").Policy<import("../../features/auth/types/auth-metas.js").UserMeta, import("../../features/auth/types/auth-metas.js").UserAuth>;
        platformUserPolicy: import("renraku").Policy<import("../../features/auth/types/auth-metas.js").PlatformUserMeta, import("../../features/auth/types/auth-metas.js").PlatformUserAuth>;
        appOwnerPolicy: import("renraku").Policy<import("../../features/auth/types/auth-metas.js").AppOwnerMeta, import("../../features/auth/types/auth-metas.js").AppOwnerAuth>;
    };
}>;
