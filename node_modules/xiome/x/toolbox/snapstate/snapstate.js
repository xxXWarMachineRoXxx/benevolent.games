import { subbies } from "../subbies.js";
import { debounce } from "../debounce/debounce.js";
import { debounceDelay } from "./parts/constants.js";
import { SnapstateReadonlyError } from "./parts/errors.js";
import { trackingMechanics } from "./parts/tracking-mechanics.js";
export function snapstate(actual) {
    const tracking = trackingMechanics();
    function get(t, key) {
        tracking.reactionRegistration(key);
        return actual[key];
    }
    const readable = new Proxy(actual, {
        get,
        set(t, key) {
            throw new SnapstateReadonlyError(`readonly state property "${key}"`);
        },
    });
    const { publish: rawPublish, subscribe } = subbies();
    const publishReadable = debounce(debounceDelay, () => rawPublish(readable));
    let waiter = Promise.resolve();
    const writable = new Proxy(actual, {
        get,
        set(t, key, value) {
            tracking.avoidCircular(key);
            actual[key] = value;
            tracking.triggerReactions(readable, key);
            waiter = publishReadable();
            return true;
        },
    });
    return {
        readable,
        writable,
        subscribe,
        track(observer, reaction) {
            return tracking.track(readable, observer, reaction);
        },
        async wait() {
            await Promise.all([waiter, tracking.wait]);
        },
    };
}
//# sourceMappingURL=snapstate.js.map