import { Binary } from "mongodb";
import { objectMap } from "../object-map.js";
import { DamnId } from "../damnedb/damn-id.js";
const toArrayBuffer = (buffer) => new Uint8Array(buffer).buffer;
// strip away the mongo database id's -- we don't use 'em
function skimMongoId(row) {
    if (row) {
        const { _id: noop, ...skimmed } = row;
        return skimmed;
    }
    return undefined;
}
export function valueUp(value, key) {
    return value instanceof DamnId
        ? new Binary(Buffer.from(value.binary))
        : value;
}
export function valueDown(value, key) {
    return value instanceof Binary
        ? new DamnId(toArrayBuffer(value.buffer))
        : value;
}
// process a row before it's sent to mongo
// - transform any damnid to mongo binary type
export function up(row) {
    return objectMap(row, valueUp);
}
// process a row retrieved from mongo
// - transform any binary types into damnid
export function down(data) {
    return (data && typeof data === "object")
        ? objectMap(skimMongoId(data), valueDown)
        : data;
}
export function ups(rows) {
    return rows.map(up);
}
export function downs(rows) {
    return rows.map(down);
}
//# sourceMappingURL=dbby-mongo-row-processing.js.map