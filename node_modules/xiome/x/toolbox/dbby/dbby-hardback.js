import { _dbbyTableSymbol } from "./dbby-table-symbol.js";
export function dbbyHardback({ frontTable, backTable }) {
    async function one(options) {
        return await backTable.one(options) ?? await frontTable.one(options);
    }
    return {
        [_dbbyTableSymbol]: true,
        one,
        create: frontTable.create,
        update: frontTable.update,
        delete: frontTable.delete,
        async read(options) {
            const [hardRows, actualRows] = await Promise.all([
                backTable.read(options),
                await frontTable.read(options),
            ]);
            return [...hardRows, ...actualRows];
        },
        async assert(options) {
            const row = await one(options);
            return row || await (async () => {
                const newRow = await options.make();
                await frontTable.create(newRow);
                return newRow;
            })();
        },
        async count(options) {
            const [hardCount, actualCount] = await Promise.all([
                backTable.count(options),
                frontTable.count(options),
            ]);
            return hardCount + actualCount;
        },
    };
}
//# sourceMappingURL=dbby-hardback.js.map