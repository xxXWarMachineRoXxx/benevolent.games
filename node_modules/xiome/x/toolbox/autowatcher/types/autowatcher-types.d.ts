import { autowatcher } from "../autowatcher.js";
export declare type Watcher<X> = () => X;
export declare type Action = (...args: any[]) => any;
export declare type Effect<X> = (observation: X) => void;
export declare type Stakeout<X> = {
    watcher: Watcher<X>;
    effect?: Effect<X>;
};
export declare type Track<X> = (stakeout: Stakeout<X>) => () => void;
export interface ObservableRecord {
    [key: string]: Stakeout<any>[];
}
export interface Actions {
    [key: string]: Action;
}
export interface ScheduledObservable {
    object: {};
    key: string;
    stakeout: Stakeout<any>;
}
export interface Context {
    observableRecords: Map<{}, ObservableRecord>;
    newObservablesSchedule: ScheduledObservable[];
    activeAction: Action;
    activeStakeout: Stakeout<any>;
}
export declare type Autowatcher = ReturnType<typeof autowatcher>;
