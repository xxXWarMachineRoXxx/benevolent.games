import { ApiError } from "../../error.js";
import { stopwatch } from "../../tools/stopwatch.js";
export function negotiator({ logger, exposeErrors }) {
    let requestCount = 0;
    const pendingResponses = new Map();
    function resolvePendingResponse(id, result) {
        const waiter = pendingResponses.get(id);
        if (waiter)
            waiter.resolve(result);
        pendingResponses.delete(id);
    }
    function rejectPendingResponse(id, reason) {
        const waiter = pendingResponses.get(id);
        if (waiter)
            waiter.reject(reason);
        pendingResponses.delete(id);
    }
    return {
        startWaitingForResponse() {
            const id = requestCount++;
            return {
                id,
                response: new Promise((resolve, reject) => {
                    pendingResponses.set(id, { resolve, reject });
                }),
            };
        },
        async acceptIncoming({ servelet, headers, incoming, respond }) {
            if (incoming.method) {
                const { id, meta, method, params } = incoming;
                try {
                    const timer = stopwatch();
                    const result = await servelet({
                        meta,
                        method,
                        params,
                        headers,
                    });
                    const duration = timer();
                    respond({
                        jsonrpc: "2.0",
                        id,
                        result,
                    });
                    logger.log(`ðŸ”» ${method}() - ${duration}ms`);
                }
                catch (error) {
                    if (!(error instanceof ApiError)) {
                        error = new ApiError(500, exposeErrors
                            ? error.message
                            : "hidden error");
                    }
                    respond({
                        jsonrpc: "2.0",
                        id,
                        error: {
                            code: error.code,
                            message: error.message,
                        },
                    });
                    logger.error(`ðŸš¨ ${error.code ?? 500}`, error.stack);
                }
            }
            else {
                const response = incoming;
                if (response.error) {
                    const { id, error: { code, message } } = response;
                    if (id === -1)
                        throw new ApiError(code, message);
                    else
                        rejectPendingResponse(id, new ApiError(code, message));
                }
                else {
                    const { id, result } = response;
                    resolvePendingResponse(id, result);
                }
            }
        },
    };
}
//# sourceMappingURL=negotiator.js.map