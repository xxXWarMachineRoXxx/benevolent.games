import { createServer } from "http";
import { servelet } from "../servelet.js";
import { stopwatch } from "../tools/stopwatch.js";
import { allowCors } from "./node-utils/allow-cors.js";
import { readStream } from "./node-utils/read-stream.js";
import { healthCheck } from "./node-utils/health-check.js";
import { respondWithError } from "./node-utils/respond-with-error.js";
import { colorfulLogger } from "../tools/fancy-logging/colorful-logger.js";
import { timestampedLogger } from "../tools/fancy-logging/timestamped-logger.js";
export function nodeServer({ api, exposeErrors, maxPayloadSize, logger = timestampedLogger(colorfulLogger(console)), processListener = (listener) => listener, }) {
    const execute = servelet(api);
    let listener = async (req, res) => {
        let id = -1;
        try {
            const body = await readStream(req, maxPayloadSize);
            const request = JSON.parse(body);
            id = request.id;
            res.setHeader("Content-Type", "application/json; charset=utf-8");
            const timer = stopwatch();
            const result = await execute({
                meta: request.meta,
                method: request.method,
                params: request.params,
                headers: req.headers,
            });
            const duration = timer();
            res.statusCode = 200;
            res.end(JSON.stringify({
                jsonrpc: "2.0",
                id,
                result,
            }));
            logger.log(`ðŸ”” ${request.method}() - ${duration.toFixed(0)}ms`);
        }
        catch (error) {
            logger.error(`ðŸš¨ ${error.code ?? 500}`, error.stack);
            return respondWithError({
                id,
                error,
                res,
                exposeErrors,
            });
        }
    };
    listener = healthCheck("/health", listener);
    listener = allowCors(listener);
    listener = processListener(listener);
    return createServer(listener);
}
//# sourceMappingURL=node-server.js.map